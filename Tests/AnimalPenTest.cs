using Core.Classes;

namespace Tests;

public class AnimalPenTest
{

    [Fact]
    public void TestCreateBearPenIsSuccessfull()
    {

        //Act
        var pen = new AnimalPen<Bear>(1);

        //Assert
        Assert.NotNull(pen);

        Assert.Equal(0, pen.Count);

        Assert.Equal(1, pen.Size);

    }

    [Fact]
    public void TestEmptyBearPenThrowsOnPop()
    {
        //Act
        var pen = new AnimalPen<Bear>(1);

        //Assert
        Assert.Throws<ArgumentOutOfRangeException>(pen.Pop);
    }

    [Fact]
    public void TestPushAnimalThrowsWhenOutOfRange()
    {
        //Arrange
        var bear1 = new Bear("Einar", "Black", 24, FoodType.Omnivore);
        var bear2 = new Bear("Freddie", "Brown", 17, FoodType.Omnivore);
        var pen = new AnimalPen<Bear>(1);

        //Act
        pen.Push(bear1);

        //Assert

        Assert.Equal(1, pen.Count);

        Assert.Throws<ArgumentOutOfRangeException>(() => pen.Push(bear2));
    }

    [Fact]
    public void TestPopAnimal()
    {
        //Arrange
        var bear1 = new Bear("Einar", "Black", 24, FoodType.Omnivore);
        var pen = new AnimalPen<Bear>(1);
        pen.Push(bear1);

        //Act
        var bearFromStack = pen.Pop();

        //Assert
        Assert.NotNull(bearFromStack);

        Assert.Equal(0, pen.Count);

        Assert.Equal(bear1.Age, bearFromStack.Age);
        Assert.Equal(bear1.Name, bearFromStack.Name);
        Assert.Equal(bear1.FurColor, bearFromStack.FurColor);
        Assert.Equal(bear1.FoodType, bearFromStack.FoodType);


    }


}